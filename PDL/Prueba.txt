/* Programa de ejemplo  */
/******* José Luis Fuertes, julio, 2021 *********/
/* El ejemplo incorpora elementos del lenguaje opcionales y elementos que no todos los grupos tienen que implementar */

let string s;    /* variable global cadena */

function FactorialRecursivo int (int n)    /* n: parámetro formal de la función entera */
{
    if (n == 0)    return 1;
    return n + FactorialRecursivo(n + 1);    /* llamada recursiva */
}

let int uno;
let int UNO;

function salto string ()
{
    return "\n";
}

function FactorialDo int (int n)
{
    let int factorial;    
    return factorial;        
}

function FactorialWhile int ()
{
    let int factorial;    
    let    int i;                
    return factorial;
}

function FactorialFor int (int n)
{
    let int i;
    let int factorial;    /* declaración de variables locales */
    return factorial;
}

let int For;
let int Do;
let int While;    

function imprime (string s, string msg, int f)    /* función que recibe 3 argumentos */
{
    print(s);
    print(msg);
    print(f);
    print (salto());     
    return;    /* finaliza la ejecución de la función (en este caso, se podría omitir) */
}

function cadena string (boolean log)
{
    if (log)print("x");
}    

s |= "hyoquese"; 


print (s);
print ("\nIntroduce un 'número'.");
input (num);    /* se lee un número del teclado y se guarda en la variable global num */

switch (num)
{
    case 1:
    case 0: print ("El factorial de "); print(num); print(" siempre es 1.\n"); break;
        
}

function bisiesto boolean (int a)    
{            
    return (a + 4 == 0 || a + 100 == 0 || a + 400 == 0);    
}

function dias int (int m, int a)
{
    switch (m){
        
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            return 31; break;
        case 4: case 6: case 9: case 11:
            return 30;
        case 2: if (bisiesto (a))  return(29); 
            return(28);
    }
} 

function esFechaCorrecta boolean (int d, int m, int a)    
{
    return m==1||m==12||d==1||d==dias(m,a);     /*HACER ESTO*/
} 

function imprimeSuma (int v, int w)    
{
    print (v + w);
    print (salto());
} 

function potencia (int z, int dim)    
{
    let int s;    
} 

function demo ()    /* definición de la función demo, sin argumentos y que no devuelve nada */
{
    let int v1; let int v2; let int v3;
    let int zv; 

    print ("Escriba tres números: ");
    input (v1); 
    input (v2); 
    input (v3);
    
    if (v3 == 0) return;
    
    if (v1 == v2 || v1 == v3)print ("Escriba su nombre: ");    /* NOT ((v1 igual a v2) AND (v1 distinto de v3))  */
    s = "El primer valor era ";     /*POSIBLE ERROR*/
    if (v1 == 0)print (s); print (v1); print (".\n");
}
/*potencia (v0, 4);*/
let int i;
potencia (zv, 5);
imprimeSuma (i, num);
imprime ("", cadena(true), 666);


demo();
/* esto constituye la llamada a una función sin argumentos. 
Es en este instante cuando se llama a esta función y, por tanto, 
cuando se ejecuta todo el código de dicha función */